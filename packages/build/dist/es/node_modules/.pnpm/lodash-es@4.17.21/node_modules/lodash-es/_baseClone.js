import C from "./_Stack.js";
import E from "./_arrayEach.js";
import F from "./_assignValue.js";
import S from "./_cloneBuffer.js";
import w from "./_getAllKeysIn.js";
import I from "./_getTag.js";
import M from "./_initCloneArray.js";
import U from "./_initCloneByTag.js";
import h from "./isArray.js";
import x from "./isBuffer.js";
import D from "./isMap.js";
import O from "./isObject.js";
import G from "./isSet.js";
var p = "[object Arguments]", K = "[object Array]", N = "[object Boolean]", R = "[object Date]", W = "[object Error]", y = "[object Function]", l = "[object GeneratorFunction]", q = "[object Map]", H = "[object Number]", A = "[object Object]", J = "[object RegExp]", L = "[object Set]", P = "[object String]", Q = "[object Symbol]", V = "[object WeakMap]", X = "[object ArrayBuffer]", Y = "[object DataView]", Z = "[object Float32Array]", _ = "[object Float64Array]", $ = "[object Int8Array]", u = "[object Int16Array]", z = "[object Int32Array]", k = "[object Uint8Array]", v = "[object Uint8ClampedArray]", rr = "[object Uint16Array]", tr = "[object Uint32Array]", r = {};
r[p] = r[K] = r[X] = r[Y] = r[N] = r[R] = r[Z] = r[_] = r[$] = r[u] = r[z] = r[q] = r[H] = r[A] = r[J] = r[L] = r[P] = r[Q] = r[k] = r[v] = r[rr] = r[tr] = !0;
r[W] = r[y] = r[V] = !1;
function T(t, c, i, d, g, e) {
  var o;
  if (i && (o = g ? i(t, d, g, e) : i(t)), o !== void 0)
    return o;
  if (!O(t))
    return t;
  var b = h(t);
  if (b)
    o = M(t);
  else {
    var f = I(t), s = f == y || f == l;
    if (x(t))
      return S(t);
    if (f == A || f == p || s && !g)
      o = {};
    else {
      if (!r[f])
        return g ? t : {};
      o = U(t, f);
    }
  }
  e || (e = new C());
  var m = e.get(t);
  if (m)
    return m;
  e.set(t, o), G(t) ? t.forEach(function(n) {
    o.add(T(n, c, i, n, t, e));
  }) : D(t) && t.forEach(function(n, a) {
    o.set(a, T(n, c, i, a, t, e));
  });
  var B = w, j = b ? void 0 : B(t);
  return E(j || t, function(n, a) {
    j && (a = n, n = t[a]), F(o, a, T(n, c, i, a, t, e));
  }), o;
}
export {
  T as default
};
